/*
 * Configuration de build pour gradle.
 * Pour construire le projet : gradlew build
 * Pour la totale (construction + refaire javadocs + distribution) : gradlew build javadoc dist
 */

plugins {
  //id 'java'
  id 'java-library'  //specialise "java" pour la distribution de librairies
  //id 'distribution'
  id 'java-library-distribution' //specialise "distribution" pour la distribution de librairies java
}

distributions {
    main {
        distributionBaseName = 'pmsixml'
        //contents {
        //    from { 'distrib' }
        //}
    }
}

//https://github.com/gradle/gradle/issues/17236
task sourcesJar(type: Jar) {
  duplicatesStrategy = 'include'
  //classifier = 'sources'
  from sourceSets.main.allSource
}

//en cas de doublon de fichier, ne pas déclencher d'erreur, juste écraser
processResources.duplicatesStrategy='include'

java {
  //pour java, nous voulons que l'exécution puisse se faire sur java 8
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  withJavadocJar()
  withSourcesJar() //nous voulons aussi un jar avec le code source
  //Les deux jars seront dans disponibles dans build\libs
}

javadoc {
    source = sourceSets.main.allJava
    options {
        encoding = 'UTF-8'
        overview "$projectDir/src/main/java/overview.html"
        //pour adresser les javadocs de java, il _faut_ utiliser linksOffline.
        //il faut aussi télécharger à la main le fichier "package-list" et le mettre dans un répertoire local. Je l'ai mis dans doc/java8-package-list/
        linksOffline 'https://docs.oracle.com/javase/8/docs/api/', "$projectDir/doc/java8-package-list/"
        linksOffline 'https://javadoc.io/doc/org.apache.logging.log4j/log4j-core/2.20.0/', "$projectDir/doc/log4j-core-2.20.0-package-list/"
        linksOffline 'https://javadoc.io/doc/org.apache.logging.log4j/log4j-api/2.20.0/', "$projectDir/doc/log4j-api-2.20.0-package-list/"
    }
}

//Forcer UTF-8 partout pour le code source java (IMPORTANT !)
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

//le numero de version est construit a partir des deux proprietes presentes dans 
//gradle.properties (qui est lu automatiquement par Gradle)
//N.B. Chacune des deux propriétés suivantes comporte leurs points
version = "$PROJECT_VERSION$PROJECT_SUB_VERSION"

repositories {
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
	implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    // implementation fileTree(include: ['*.jar'], dir: 'lib')
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
	useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
    test {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

task myJavadocs(type: Javadoc) {
   source = sourceSets.main.allJava
}

/**
 * Tâche qui exécute jekyll en tant que commande (doit être installé et dans le PATH)
 */
//task jekyll(type: Exec) {
//    println "Starting Jekyll generation"
//    commandLine = ['cmd', '/C', 'jekyll', 'build', '--destination', '../../build/docs'] 
//    workingDir = file('./src/doc/')
//}

/**
 * Construire la distribution
 */
task dist {
    doLast {
        ant {
            destdir = "v$version"

            //copier les librairies notamment le jar de pmsixml
            mkdir(dir: "dist/$destdir/lib")

            //copy(todir: "dist/$destdir/lib", preservelastmodified: true) {
            //    fileset(dir: "lib")
            //}

            copy(file: "build/libs/pmsixml-${version}.jar", todir: "dist/$destdir/lib", preservelastmodified: true)

            //copier le repertoire des javadocs dans les docs de sortie

            mkdir(dir: "dist/$destdir/docs/javadoc")

            //le créer au cas où il n'existerait pas encore (si "javadoc" n'a pas été lancé)
            mkdir(dir: "build/docs/javadoc/")

            copy(todir: "dist/$destdir/docs/javadoc", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "build/docs/javadoc/")
            }
            
            //copier les documents générés manuellement
            copy(todir: "dist/$destdir/docs", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir:  "src/doc/asciidoc")
                //filelist(dir: "src/doc/asciidoc", 
                //         files: "pmsixml.adoc,pmsixml.html,pmsixml.pdf")
            }

        }//ant
    }//doLast
}//task dist
